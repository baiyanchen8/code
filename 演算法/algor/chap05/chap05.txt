x MERGE SORT
    - merge only
        % idea
            merge two array
            ! STEP 0 
            A   |1,2,5,5,6  |B  |3,4,7,8,9
            ANS |X,X,X,X,X      ,X,X,X,X,X
            ! STEP 1    (1<3)-->1 to ANS
            A   |XX,2,5,5,6  |  |3,4,7,8,9
            ANS |1,X,X,X,X      ,X,X,X,X,X
            ! STEP 2    (2<3)-->2 to ANS
            A   |X,X,5,5,6  |B  |3,4,7,8,9
            ANS |1,2,X,X,X      ,X,X,X,X,X
            ! STEP 3    (3<5)-->3 to ANS
            A   |X,X,5,5,6  |B  |X,4,7,8,9
            ANS |1,2,3,X,X      ,X,X,X,X,X
            # 省略
            ! STEP 10
            A   |X,X,X,X,X  |B  |X,X,X,X,X
            ANS |1,2,3,4,5      ,5,6,7,8,9
        % code
            ~ merge two array and return one
            public int [] (int[]a,int[]b)
            int A[a.length+b.length];
            int i=0,j=0,k=0;
            for(i=0;i<A.length;i++)+{
                if(j>=a.length){
                    A[i]=b[k++];
                }else if(k>=b.length){
                    A[i]=a[j++];
                }else if(a[j]>b[k]){
                    A[i]=b[k++]
                }else{
                    A[i]=a[j++]
                }
            }
            return A
            ~ 正式版
                for (int k = lo; k <= hi; k++){
                    if (i > mid)   
                        a[k] = aux[j++];
                    else if (j > hi)
                        a[k] = aux[i++];
                    else if (less(aux[j], aux[i])) 
                        a[k] = aux[j++];
                else
                        a[k] = aux[i++];
                }
        % time cost
            a.length+b.length==>O(N)
    - TOP DOWN MERGE SORT( MERGE SORT)
        % idea
            recursive divide arr into 
            直至全部都只有１的長度
            再做merge
        % CODE
            def sort(int[] a, int[] aux, int lo, int hi)
            {
                if (hi <= lo) return;
                int mid = lo + (hi - lo) / 2;
                sort(a, aux, lo, mid);
                sort(a, aux, mid+1, hi);
                merge(a, aux, lo, mid, hi);
            }
        % time cost
            D(N)=O(NlgN)
    - buttom up merge sort
        % basic idea
            與top-down merge sort 相反，t-d用recursive，b-u用for
            1,2,4,8...序列大小做merge
        % basic code
            for(int si=1;si<a.length;si++){
                for(int low=0;low<a.length-si;low+=2*si){
                    merge(a, aux, lo, lo+sz-1, Math.min(lo+sz+sz-1, N-1));
                }
            }
        % exllent idea(natural/Tim sort)
            berfore merge ,we find pre-existing order to use
        % Tim sort code
                int[] aux = new int[a.length];
                int mid=1,hi=0,mi=0;
                while(a[mid]>=a[mi]){
                    mid++;
                    mi++;
                }
                hi=mi+1;
                while(hi<a.length){
                int hh=hi+1;
                while(a[hh]>=a[hi]&&hh<a.length){
                    if(hh==a.length-1){
                        hi++;
                        break;
                    }
                    hi++;
                    hh++;
                }
                merge(a, aux, 0,mi,hi);
                mi=hi;
                hi++;
                }
    - summary
        % time cost
                    |best   |worst  | average
            Tim     |N      |NlgN   |NlgN
            basic   |NlgN/2 |NlgN   |NlgN
            